from doctomarkdown.base import BaseConverter, PageResult, ConversionResult
from typing import Optional
from docx import Document
import logging

logger = logging.getLogger(__name__)

class DocxToMarkdown(BaseConverter):
    """Converter for DOCX files to Markdown format."""

    def extract_content(self):
        # Load the DOCX document from the provided file path
        doc = Document(self.filepath)
        # Check if an LLM client is available for enhanced Markdown generation
        use_llm = hasattr(self, 'llm_client') and self.llm_client is not None

        pages = []          # List to store PageResult objects
        markdown_lines = [] # List to accumulate Markdown output

        # For simplicity, treat the entire document as a single "page"
        text = []
        for para in doc.paragraphs:
            # Extract text from each paragraph in the document
            text.append(para.text)
        # Join all paragraph texts with double newlines for Markdown formatting
        page_content = "\n\n".join(text)

        # If LLM is available, process the extracted text with LLM for improved Markdown
        try:
            if use_llm and hasattr(self, "generate_markdown_from_text"):
                # Use the LLM to generate enhanced Markdown from the extracted text
                llm_result = self.generate_markdown_from_text(page_content)
                page_content = f"\n{llm_result}"
        except Exception as e:
            # Log a warning if LLM processing fails, but continue with raw text
            logger.warning(f"LLM extraction failed for DOCX: {e}")

        # Store the result as a single page (PageResult)
        pages.append(PageResult(1, page_content))
        # Add a Markdown header for the page and the content
        markdown_lines.append(f"## Page 1\n\n{page_content}\n")

        # Store the complete Markdown output in the instance variable
        self._markdown = "\n".join(markdown_lines)
        return pages

    # LLM-based text enhancement method implementation
    def generate_markdown_from_text(self, text: str) -> str:
        """
        Use the LLM client to convert extracted text to enhanced Markdown.

        This method sends the extracted text from the DOCX file to a language model (LLM)
        for conversion into improved Markdown format. It constructs a prompt with a system
        message and the user content, then calls the LLM client to get the Markdown output.

        Args:
            text (str): The plain text extracted from the DOCX file.

        Returns:
            str: The enhanced Markdown content generated by the LLM.

        Raises:
            ValueError: If the LLM client type is unsupported.
        """
        if hasattr(self.llm_client, "chat"):
            def call_llm():
                # Call the LLM with a system prompt and the user content
                return self.llm_client.chat.completions.create(
                    model=self.llm_model,
                    messages=[
                        {"role": "system", "content": "You are an expert at converting DOCX content to Markdown."},
                        {"role": "user", "content": text}
                    ],
                    temperature=0,
                ).choices[0].message.content
            return call_llm()
        else:
            # Raise an error if the LLM client type is unsupported
            raise ValueError("Unsupported LLM client type.")